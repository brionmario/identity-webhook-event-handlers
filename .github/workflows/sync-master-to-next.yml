# .github/workflows/sync-master-to-next.yml
name: 🔄 Sync PRs from master to next

on:
  push:
    branches: [master, main]

permissions:
  contents: write
  pull-requests: write

env:
  TARGET_BRANCH: next
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get last commit
        id: commit_info
        run: |
          LAST_COMMIT="${{ github.sha }}"
          LAST_MESSAGE=$(git log -1 --pretty=%B $LAST_COMMIT)
          echo "Last commit: $LAST_COMMIT"
          echo "Message: $LAST_MESSAGE"

          # Skip if last commit is a Jenkins release commit
          if [[ "$LAST_MESSAGE" =~ ^"\[WSO2 Release\]" ]]; then
            echo "Last commit is a Jenkins release commit. Skipping sync action."
            exit 0
          fi

          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV

      - name: Get commits since last push to target branch (excluding Jenkins)
        id: commits_list
        run: |
          TARGET_BRANCH=${{ env.TARGET_BRANCH }}
          BASE_BRANCH="${{ github.ref_name }}"

          # Fetch target branch
          git fetch origin $TARGET_BRANCH

          # Get all commits from master/main since target branch
          COMMITS=$(git log "origin/$TARGET_BRANCH..$BASE_BRANCH" --no-merges --pretty=format:"%H")

          FILTERED_COMMITS=""
          for commit in $COMMITS; do
            MESSAGE=$(git log -1 --pretty=%B $commit)
            if [[ "$MESSAGE" =~ ^"\[WSO2 Release\]" ]]; then
              echo "Skipping Jenkins commit $commit: $MESSAGE"
              continue
            fi
            FILTERED_COMMITS="$FILTERED_COMMITS $commit"
          done

          if [ -z "$FILTERED_COMMITS" ]; then
            echo "No commits to sync after filtering. Exiting..."
            exit 0
          fi

          echo "PR_COMMITS=$FILTERED_COMMITS" >> $GITHUB_ENV

      - name: Create sync branch and cherry-pick commits
        run: |
          SYNC_BRANCH="sync-${{ github.run_id }}-to-${{ env.TARGET_BRANCH }}"

          git checkout -b "$SYNC_BRANCH" "origin/${{ env.TARGET_BRANCH }}"

          CONFLICTS=false
          ANY_APPLIED=false
          for commit in $PR_COMMITS; do
            echo "Cherry-picking commit $commit..."
            if ! git cherry-pick "$commit"; then
              echo "::warning::Conflict detected on commit $commit"
              CONFLICTS=true
            else
              ANY_APPLIED=true
            fi
          done

          # Push the sync branch regardless of conflicts
          git push origin "$SYNC_BRANCH" --force

          # Build PR body safely
          PR_BODY="🤖 **Auto-sync from $BASE_BRANCH**"$'\n'"This PR automatically syncs changes from \`$BASE_BRANCH\` to \`${{ env.TARGET_BRANCH }}\`."
          
          if [ "$CONFLICTS" = true ]; then
            if [ "$ANY_APPLIED" = false ]; then
              PR_BODY="$PR_BODY"$'\n\n'"⚠️ **All commits conflicted. Manual merge required.**"
            else
              PR_BODY="$PR_BODY"$'\n\n'"⚠️ **Some commits had conflicts. Manual resolution required for these changes.**"
            fi
          fi

          # Create PR
          gh pr create --base "${{ env.TARGET_BRANCH }}" --head "$SYNC_BRANCH" --title "[Sync][$BASE_BRANCH -> ${{ env.TARGET_BRANCH }}] Auto-sync" --body "$PR_BODY"
