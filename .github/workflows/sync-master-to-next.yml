name: ðŸ”„ Sync PRs from master to next

on:
  push:
    branches:
      - master
      - main

# Ensure only one sync workflow runs at a time to handle queued actions properly
concurrency:
  group: sync-to-next
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  BASE_BRANCH: main
  TARGET_BRANCH: next
  SYNC_BRANCH: sync-to-next
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create or update sync branch
        run: |
          # Fetch latest from both branches
          git fetch origin $TARGET_BRANCH
          git fetch origin $SYNC_BRANCH || true  # Sync branch might not exist yet
          
          # Check if sync branch exists on remote
          if git ls-remote --heads origin $SYNC_BRANCH | grep -q $SYNC_BRANCH; then
            echo "Sync branch exists, checking out and updating from target"
            git checkout $SYNC_BRANCH
            # Merge any new changes from target branch to keep sync branch up-to-date
            git merge origin/$TARGET_BRANCH --no-edit || {
              echo "Merge conflict with target branch, resetting sync branch"
              git reset --hard origin/$TARGET_BRANCH
            }
          else
            echo "Creating new sync branch from target"
            git checkout $TARGET_BRANCH
            git checkout -b "$SYNC_BRANCH"
          fi

      - name: Get trigger commit and associated PR
        id: trigger_info
        run: |
          # Get the commit that triggered this workflow
          TRIGGER_COMMIT="${{ github.sha }}"
          echo "Trigger commit: $TRIGGER_COMMIT"
          
          # Find which PR this commit belongs to
          PR_NUMBER=$(gh pr list \
            --state merged \
            --base ${{ env.BASE_BRANCH }} \
            --search "$TRIGGER_COMMIT" \
            --json number \
            -q '.[0].number // empty')
          
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found for commit $TRIGGER_COMMIT. This might be a direct push."
            # For direct pushes, we'll sync just this commit
            echo "PR_NUMBER=" >> $GITHUB_ENV
            echo "SYNC_MODE=commit" >> $GITHUB_ENV
            echo "COMMITS_TO_SYNC=$TRIGGER_COMMIT" >> $GITHUB_ENV
          else
            echo "Found PR #$PR_NUMBER for commit $TRIGGER_COMMIT"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "SYNC_MODE=pr" >> $GITHUB_ENV
            
            # Get all commits from this specific PR
            COMMITS=$(gh pr view $PR_NUMBER --json commits -q '.commits[].oid' | tr '\n' ' ')
            echo "COMMITS_TO_SYNC=$COMMITS" >> $GITHUB_ENV
            echo "Commits from PR #$PR_NUMBER: $COMMITS"
          fi

      - name: Cherry-pick commits (skip [skip ci], workflow files, pom.xml only)
        run: |
          if [ -z "$COMMITS_TO_SYNC" ]; then
            echo "No commits to sync."
            exit 0
          fi
          
          for commit in $COMMITS_TO_SYNC; do
            if [ -z "$commit" ]; then
              continue
            fi
            
            MESSAGE=$(git log -1 --pretty=%B $commit)
            FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r $commit)

            if [[ "$MESSAGE" =~ \[skip\ ci\] ]]; then
              echo "Skipping $commit because of [skip ci]"
              continue
            fi

            if echo "$FILES_CHANGED" | grep -q "^.github/workflows/"; then
              echo "Skipping $commit because it modifies a workflow"
              continue
            fi

            if ! echo "$FILES_CHANGED" | grep -v -E "pom\.xml" | grep -q '.'; then
              echo "Skipping $commit because it only modifies pom.xml files"
              continue
            fi

            echo "Cherry-picking commit $commit: $(git log -1 --oneline $commit)"
            git cherry-pick $commit || {
              echo "Cherry-pick failed for $commit. Attempting to skip..."
              git cherry-pick --skip
            }
          done

      - name: Push sync branch (force update)
        run: git push origin HEAD:"$SYNC_BRANCH" --force

      - name: Fetch target branch
        run: git fetch origin $TARGET_BRANCH:$TARGET_BRANCH || true

      - name: Create or update pull request
        run: |
          COMMITS_ON_BRANCH=$(git log ${{ env.TARGET_BRANCH }}..HEAD --oneline || true)
          if [ -z "$COMMITS_ON_BRANCH" ]; then
            echo "No commits to sync. Skipping PR creation."
            exit 0
          fi

          # Check for existing open PR for this sync branch
          EXISTING_PR=$(gh pr list \
            --base "${{ env.TARGET_BRANCH }}" \
            --head "$SYNC_BRANCH" \
            --state open \
            --json number \
            -q '.[0].number')

          # Count total commits and PRs being synced
          TOTAL_COMMITS=$(echo "$COMMITS_ON_BRANCH" | wc -l | tr -d ' ')
          
          # Get list of PR numbers from commit messages in the sync branch
          PR_NUMBERS=$(git log ${{ env.TARGET_BRANCH }}..HEAD --oneline | grep -oE '#[0-9]+' | sort -u | tr '\n' ' ')
          PR_COUNT=$(echo "$PR_NUMBERS" | wc -w | tr -d ' ')

          if [ "$PR_COUNT" -eq 1 ] && [ "$SYNC_MODE" = "pr" ] && [ -n "$PR_NUMBER" ]; then
            # Single PR sync
            PR_TITLE=$(gh pr view $PR_NUMBER --json title -q '.title')
            PR_AUTHOR=$(gh pr view $PR_NUMBER --json author -q '.author.login')
            SYNC_TITLE="[Sync][${{ env.BASE_BRANCH }} -> ${{ env.TARGET_BRANCH }}][#${PR_NUMBER}]: $PR_TITLE"
            PR_BODY="ðŸ¤– **Auto-sync from ${{ env.BASE_BRANCH }}**
          
          This PR automatically syncs the changes from #${PR_NUMBER} to the \`${{ env.TARGET_BRANCH }}\` branch.
          
          **Original PR:** https://github.com/${{ github.repository }}/pull/${PR_NUMBER}
          **Author:** @${PR_AUTHOR}
          **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          else
            # Multiple PRs or mixed commits
            SYNC_TITLE="[Sync][${{ env.BASE_BRANCH }} -> ${{ env.TARGET_BRANCH }}]: $PR_COUNT PRs ($TOTAL_COMMITS commits)"
            PR_BODY="ðŸ¤– **Auto-sync from ${{ env.BASE_BRANCH }}**
          
          This PR automatically syncs multiple changes to the \`${{ env.TARGET_BRANCH }}\` branch.
          
          **Summary:**
          - **Total commits:** $TOTAL_COMMITS
          - **PRs included:** $PR_NUMBERS
          - **Latest workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Recent commits:**
          \`\`\`
          $(git log ${{ env.TARGET_BRANCH }}..HEAD --oneline | head -10)
          \`\`\`
          
          > **Note:** This sync accumulates changes from queued workflows to handle concurrent merges properly."
          fi

          if [ -n "$EXISTING_PR" ]; then
            echo "PR #$EXISTING_PR already exists for sync branch. Updating with new commits."
            gh pr edit $EXISTING_PR --title "$SYNC_TITLE" --body "$PR_BODY"
            echo "Updated existing PR #$EXISTING_PR with $TOTAL_COMMITS total commits"
          else
            NEW_PR=$(gh pr create \
              --base "${{ env.TARGET_BRANCH }}" \
              --head "$SYNC_BRANCH" \
              --title "$SYNC_TITLE" \
              --body "$PR_BODY")
            echo "Created new PR: $NEW_PR"
          fi
