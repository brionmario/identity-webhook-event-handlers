# .github/workflows/sync-master-to-next.yml
name: üîÑ Sync PRs from master to next

on:
  pull_request:
    types: [closed]
    branches: [master, main]

permissions:
  contents: write
  pull-requests: write

env:
  TARGET_BRANCH: next
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check PR merge commit
        id: pr_info
        run: |
          if [ "${{ github.event.pull_request.merged }}" != "true" ]; then
            echo "This PR was not merged. Exiting..."
            exit 0
          fi

          PR_NUMBER="${{ github.event.pull_request.number }}"
          MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
          LAST_MESSAGE=$(git log -1 --pretty=%B $MERGE_COMMIT)

          echo "Last commit message: $LAST_MESSAGE"

          # Skip if last commit is a Jenkins release commit
          if [[ "$LAST_MESSAGE" =~ ^"\[WSO2 Release\]" ]]; then
            echo "Last commit is a Jenkins release commit. Skipping sync action."
            exit 0
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "MERGE_COMMIT=$MERGE_COMMIT" >> $GITHUB_ENV

      - name: Get commits from PR (excluding Jenkins commits)
        id: pr_commits
        run: |
          echo "Fetching commits for PR #$PR_NUMBER"
          PR_COMMITS=$(gh pr view $PR_NUMBER --repo $GITHUB_REPOSITORY --json commits --jq '.commits[].oid')

          if [ -z "$PR_COMMITS" ]; then
            echo "No commits found for PR #$PR_NUMBER"
            exit 1
          fi

          FILTERED_COMMITS=""
          for commit in $PR_COMMITS; do
            MESSAGE=$(git log -1 --pretty=%B $commit)
            if [[ "$MESSAGE" =~ ^"\[WSO2 Release\]" ]]; then
              echo "Skipping Jenkins commit $commit: $MESSAGE"
              continue
            fi
            FILTERED_COMMITS="$FILTERED_COMMITS $commit"
          done

          if [ -z "$FILTERED_COMMITS" ]; then
            echo "No commits left after filtering Jenkins commits. Exiting..."
            exit 0
          fi

          echo "Filtered commits: $FILTERED_COMMITS"
          echo "PR_COMMITS=$FILTERED_COMMITS" >> $GITHUB_ENV

      - name: Create sync branch and cherry-pick PR commits
        run: |
          SYNC_BRANCH="sync-pr-${PR_NUMBER}-to-${{ env.TARGET_BRANCH }}"

          # Ensure target branch exists
          git fetch origin ${{ env.TARGET_BRANCH }}
          git checkout -b "$SYNC_BRANCH" "origin/${{ env.TARGET_BRANCH }}"

          CONFLICTS=false
          for commit in $PR_COMMITS; do
            echo "Cherry-picking commit $commit..."
            if ! git cherry-pick "$commit"; then
              echo "::warning::Conflict detected on commit $commit"
              CONFLICTS=true
              break
            fi
          done

          # Push the branch even if conflicts exist
          git push origin "$SYNC_BRANCH" --force

          # Build PR body safely for multiline
          PR_BODY="ü§ñ **Auto-sync PR #$PR_NUMBER**"$'\n'"This PR automatically syncs changes from PR #$PR_NUMBER (merged to master/main) to \`${{ env.TARGET_BRANCH }}\`."

          if [ "$CONFLICTS" = true ]; then
            PR_BODY="$PR_BODY"$'\n\n'"‚ö†Ô∏è **Merge Conflicts Detected**"$'\n'"This PR requires manual resolution of merge conflicts."
          fi

          # Create PR
          gh pr create --base "${{ env.TARGET_BRANCH }}" --head "$SYNC_BRANCH" --title "[Sync][PR #$PR_NUMBER] Auto-sync" --body "$PR_BODY"
